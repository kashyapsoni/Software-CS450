#lang errortrace racket
(require "hw8-util.rkt")

(provide (all-defined-out))

;; Utility function that converts a variable into a string
;; Useful when translating from SimpleJS into LambdaJS
(define (mk-field x)
  (match x [(s:variable x) (k:string (symbol->string x))]))

;; Utility function that allocates a j:object.
;; (mk-object) allocates an empty object
;; (mk-object (cons "foo" (k:number 1)) (cons "bar" (j:variable 'x)))
;;  allocates an object with one field "foo" and one field "bar"
(define/contract (mk-object . args)
  (-> (cons/c string? j:expression?) ... j:alloc?)
  (define (on-elem pair)
    (cons (k:string (car pair)) (cdr pair)))
  (j:alloc (j:object (make-immutable-hash (map on-elem args)))))

;;;;;;;;;;;;;;;
;; Exercise 1

(define/contract (translate exp)
  (-> s:expression? j:expression?)
  (match exp
    [(? k:const? k) k]
    [(s:variable x) (j:variable x)]
    [(s:let (s:variable x) s1 s2)
     (j:let (j:variable x) (translate s1) (translate s2))]
    [(s:apply f ea) (j:apply (translate f) (map translate ea))]))
;;;;;;;;;;;;;;;
;;di Exercise 4

(define/contract (desugar exp)
  (-> s:expression? s:expression?)
  (match exp
    [(s:let x e1 e2) (s:let x (desugar e1) (desugar e2))]
    [(s:assign o f e) (s:assign o f (desugar e))]
    [(s:function xs e) (s:function xs (desugar e))]
    [(s:new ef ea) (s:new (desugar ef) (map desugar ea))]
    [(s:apply ef ea) (s:apply (desugar ef) (map desugar ea))]
    [(s:invoke o m ea) (s:invoke o m (map desugar ea))]
    [(s:class parent ms) 'todo]
    [_ exp]))


;;;;;;;;;;;;;;;
;; Exercise 2 (MANUALLY GRADED)
#|
PLEASE REPLACE THIS TEXT BY YOU ANSWER.
YOU MAY USE MULTIPLE LINES.
|#
